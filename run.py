import logging
from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.types import ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
import aiogram.utils.markdown as md
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)
from API import api

bot = Bot(token=api)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –•–∞–±–∞—Ä–ª–∞–º–∞ —Ç–∏–ø—ñ
msg = types.Message

@dp.message_handler(commands=['start'])
async def command_start(message: msg):
    id_user = message.from_user.id
    start_btn = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    start_btn.add("–°—ñ–ª—Ç–µ–º–µ –∂—ñ–±–µ—Ä—É")
    await bot.send_message(message.from_user.id,
                           "–°–∞–π—Ç“õ–∞ —Å—ñ–ª—Ç–µ–º–µ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑‚¨Ü",
                           reply_markup=start_btn)

from forma import Forma
@dp.message_handler(state='*', commands='–ë–∞—Å —Ç–∞—Ä—Ç—Éüôåüèª')
@dp.message_handler(Text(equals='–ë–∞—Å —Ç–∞—Ä—Ç—Éüôåüèª', ignore_case=True), state='*')
async def cancell_handler(message: types.Message, state: FSMContext):
    """
    :param message: –ë–∞—Å—Ç–∞—Ä—Ç—ã–ª–¥—ã
    :param state: –¢–æ“õ—Ç–∞—Ç—É
    :return: finish

    """

    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('–ë–∞—Å —Ç–∞—Ä—Ç—É!')
    await state.finish()
    main_btn = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    main_btn.add("–°—ñ–ª—Ç–µ–º–µ –∂—ñ–±–µ—Ä—É")
    await message.reply('–ë–∞—Å—Ç–∞—Ä—Ç—ã–ª–¥—ã.', reply_markup=main_btn)

@dp.message_handler(content_types=['text'])
async def content_text(message: msg):
    public_m = message.text

    if public_m == "–°—ñ–ª—Ç–µ–º–µ –∂—ñ–±–µ—Ä—É":
        await Forma.link.set()
        cancell = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        cancell.add("–ë–∞—Å —Ç–∞—Ä—Ç—Éüôåüèª")
        await bot.send_message(message.from_user.id,
                               "–°–∞–π—Ç“õ–∞ —Å—ñ–ª—Ç–µ–º–µ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑‚¨Ü",
                               reply_markup=cancell)
    else:
        await bot.send_message(message.from_user.id,
                               "/start –±–∞—Å—ã“£—ã–∑")


from pkgCelery import parse
from db import connection, cursor, insert, check_url
@dp.message_handler(state=Forma.link)
async def start_state(message: msg, state: FSMContext):
    id_u = message.from_user.id
    global link_
    async with state.proxy() as data:
        data['link'] = message.text
        link_ = data['link']
    print(link_)
    '''
    —Ç–µ–∫—Å–µ—Ä—É!
    '''
    #t = check_url(link_)
    check = "SELECT res FROM links WHERE URLS = %s"
    cursor.execute(check, (link_,))
    c = cursor.fetchall()
    for i in c:
        l = int(''.join(map(str, i)))
        await bot.send_message(message.from_user.id,
                               text="–°—ñ–∑–¥—ñ“£ –∂—ñ–±–µ—Ä–≥–µ–Ω —Å—ñ–ª—Ç–µ–º–µ“£—ñ–∑ –±–∞–∑–∞–¥–∞üóÇ –±–∞—Äüòä, —Ç—ç–≥—Ç–µ—Ä —Å–∞–Ω—ã: {}".format(l),
                               reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True,
                                                                      selective=True).add("–°—ñ–ª—Ç–µ–º–µ –∂—ñ–±–µ—Ä—É"))
        break



    else:
        await bot.send_message(message.from_user.id,
                               text="–¢–∞–ø—Å—ã—Ä–º–∞ –¥–∞–π—ã–Ω –µ–º–µ—Å, –∫“Ø—Ç–µ —Ç“±—Ä—ã“£—ã–∑üôÉ")
        res = parse(link_)
        insert(id_u, link_, res)
        await bot.send_message(message.from_user.id,
                               text="–¢—ç–≥—Ç–µ—Ä —Å–∞–Ω—ã: {}".format(res),
                               reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True,
                                                                      selective=True
                                                                      ).add("–°—ñ–ª—Ç–µ–º–µ –∂—ñ–±–µ—Ä—É"))

    await state.finish()
    

if __name__ == "__main__":
    '''
    –ó–∞–ø—É—Å–∫
    '''
    from aiogram.utils import executor
    executor.start_polling(dp, skip_updates=True)

